@page "/createCharacter"
@using Entities.Models
@inject AuthenticationStateProvider state
@inject ICharacterService service
@if (_newCharacter.UserEmail != null)
{
    <form>
        <div class="form-group">
            <label>Email address</label>
            <input type="email" class="form-control" id="Email" aria-describedby="emailHelp" disabled @bind-value="@_newCharacter.UserEmail">
        </div>

        <div class="form-group">
            <label>Enter username</label>
            <input type="text" class="form-control" id="CharacterName" @bind-value="@_newCharacter.CharacterName">
        </div>

        <button @onclick="CreateCharacterAsync" class="btn btn-primary">Submit</button>
    </form>
}
else
{
    <p>Loading...</p>
}

@code {
    private readonly CharacterForCreationDto _newCharacter = new();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await state.GetAuthenticationStateAsync();
        var user = authstate.User;
        _newCharacter.UserEmail = user.Identity?.Name;
        _newCharacter.Level = 1;
        _newCharacter.Skills = new Skills();
    }

    private async Task CreateCharacterAsync()
    {
        await service.CreateCharacterRequest(_newCharacter);
    }

}