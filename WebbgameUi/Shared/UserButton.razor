@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _nav
<AuthorizeView>
    <Authorized>
        Logged in as @context.User.FindFirst(ClaimTypes.Name).Value

    </Authorized>
</AuthorizeView>

<div class="dropdown">
    <button @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu"
            class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>

                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="register" class="dropdown-item">Register</a>
                <a href="login" class="dropdown-item">Login</a>
            </NotAuthorized>
        </AuthorizeView>

    </div>
</div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;

    }
    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _nav.NavigateTo("");
    }
}
    